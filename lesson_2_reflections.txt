?What happens when you initialize a repository? Why do you need to do it?

You're creating a secret .git file setting the stage for files to be tracked through commits

To start the git process and initialize .git folder so as to later make commits

?How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is an in between space where a file or group of files live before getting packaged into one commit

The working directory is just the home folder you're working in.
The repository is where the versions will be saved.

Bonus Reflection: git diff compares staging area to working directory. Since staging area is initialized as a copy of master, the yield of git diff are changes not reflected in master or pending commits aka staging area

**Staging Area is Simply a copy of the most recent commit until changes have been added to it.**

?How can you use the staging area to make sure you have one commit per logical change?

I feel the better questions is how do you use "git diff w/ no argument" and "git diff --staged" to only commit one logical change.

using both makes you aware of uncommitted changes.

The staging area itself is crucial for "staging" the changes as you intend. e.g. you may have made 2 changes, but given their relation, want to commit them separately.

?What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you're trying out some new crazy shit but don't want to fuck with what's already working.
You're creating a parallel version like an easy-mode or Spanish language version

Branch ideas: new feature, bug fix, development branch, unique feature branch. Things you fully expect might break but you want to share them.

Keep master branch as prodcution quality branch for sharing purposes.

How do the diagrams help you visualize the branch structure?

Since a branch is by definition non-linear, a visualizaion is key for understanding relationships

?What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

It compiles the commits aka changes of both into one branch. Since the merge has 2 parents, you can still trace back the commit log and nothing is lost.

?What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

pros- you don't get weird merges that don't make sense, hand pick changes
cons- seems like it'd be a bitch when the changes have been extensive
going through the file and making the changes seems scary but that's probably because I don't really know java yet